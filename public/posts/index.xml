<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Azure Laboratory</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Azure Laboratory</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure API Management and APIOps: A Modern Approach to API Lifecycle Management</title>
      <link>http://localhost:1313/posts/my-first-post/</link>
      <pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/my-first-post/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;AI GENERATED CONTENT TO SERVE AS A PLACEHOLDER - NOT REAL CONTENT&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In today&amp;rsquo;s rapidly evolving digital landscape, APIs have become the backbone of modern applications and services. As organizations scale their API infrastructure, managing the complete API lifecycle becomes increasingly complex. This is where Azure API Management (APIM) and APIOps come into play, offering a robust solution for API lifecycle management and automation.&lt;/p&gt;&#xA;&lt;h2 id=&#34;understanding-apiops&#34;&gt;Understanding APIOps&lt;/h2&gt;&#xA;&lt;p&gt;APIOps, an extension of GitOps principles applied to API management, represents a set of practices that combine API development with operations. It emphasizes automation, collaboration, and continuous improvement throughout the API lifecycle. By incorporating APIOps practices, organizations can achieve faster time-to-market, improved quality, and consistent API governance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding HTTP/3: The Future of Web Protocol</title>
      <link>http://localhost:1313/posts/my-third-sample-post/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/my-third-sample-post/</guid>
      <description>&lt;h1 id=&#34;understanding-http3-the-future-of-web-protocol&#34;&gt;Understanding HTTP/3: The Future of Web Protocol&lt;/h1&gt;&#xA;&lt;p&gt;HTTP/3 represents a significant evolution in web protocols, building on lessons learned from HTTP/1.1 and HTTP/2.&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-features&#34;&gt;Key Features&lt;/h2&gt;&#xA;&lt;h3 id=&#34;quic-transport-protocol&#34;&gt;QUIC Transport Protocol&lt;/h3&gt;&#xA;&lt;p&gt;HTTP/3 is built on QUIC, which offers several advantages:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Built-in encryption&lt;/li&gt;&#xA;&lt;li&gt;Reduced latency&lt;/li&gt;&#xA;&lt;li&gt;Connection migration&lt;/li&gt;&#xA;&lt;li&gt;Multiplexing without head-of-line blocking&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;performance-improvements&#34;&gt;Performance Improvements&lt;/h2&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s a simple Node.js server using HTTP/3:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http3&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createServer&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeHead&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt; });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello HTTP/3!&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;comparison-with-http2&#34;&gt;Comparison with HTTP/2&lt;/h3&gt;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;graph TD&#xA;    A[HTTP/2] --&amp;gt;|TCP + TLS| B[Transport]&#xA;    C[HTTP/3] --&amp;gt;|QUIC| D[Transport + Security]&#xA;  &lt;/pre&gt;&#xA;  &lt;h2 id=&#34;implementation-considerations&#34;&gt;Implementation Considerations&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;HTTP/3 is not just an upgrade, it&amp;rsquo;s a rethinking of how modern web protocols should work.&amp;rdquo; - Daniel Stenberg&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Art of Sourdough: A Baker&#39;s Guide</title>
      <link>http://localhost:1313/posts/my-second-sample-post/</link>
      <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/my-second-sample-post/</guid>
      <description>&lt;h1 id=&#34;the-art-of-sourdough-a-bakers-guide&#34;&gt;The Art of Sourdough: A Baker&amp;rsquo;s Guide&lt;/h1&gt;&#xA;&lt;p&gt;Making sourdough bread is both a science and an art. It requires patience, practice, and understanding of the fermentation process.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-starter&#34;&gt;The Starter&lt;/h2&gt;&#xA;&lt;p&gt;Your sourdough starter is a living ecosystem of wild yeast and bacteria. Here&amp;rsquo;s how to maintain it:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Feed it regularly&lt;/li&gt;&#xA;&lt;li&gt;Keep it at room temperature&lt;/li&gt;&#xA;&lt;li&gt;Monitor its activity&lt;/li&gt;&#xA;&lt;li&gt;Notice the smell and appearance&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;feeding-schedule&#34;&gt;Feeding Schedule&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Morning Feed:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 100g starter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 100g flour&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 100g water&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Evening Feed:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Discard all but 50g&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Add 50g flour&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Add 50g water&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-basic-recipe&#34;&gt;The Basic Recipe&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;Time and temperature are your most important ingredients.&amp;rdquo; - Chad Robertson&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with Go Channels</title>
      <link>http://localhost:1313/posts/my-sample-post/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/my-sample-post/</guid>
      <description>&lt;h1 id=&#34;getting-started-with-go-channels&#34;&gt;Getting Started with Go Channels&lt;/h1&gt;&#xA;&lt;p&gt;Go&amp;rsquo;s concurrency model is one of its standout features, and channels are at the heart of it. Let&amp;rsquo;s explore how channels work and why they&amp;rsquo;re so powerful.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-channels&#34;&gt;What are Channels?&lt;/h2&gt;&#xA;&lt;p&gt;Channels are typed conduits through which you can send and receive values. They act as pipes that connect concurrent goroutines, allowing them to communicate and synchronize their execution.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;Don&amp;rsquo;t communicate by sharing memory; share memory by communicating.&amp;rdquo; - Rob Pike&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
